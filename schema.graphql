scalar Array

type Code {
  code: String!
  mode: String!
}

scalar JsonArgument

type DateRange {
  start(format: String): String
  end(format: String): String
}

type Site {
  handle: String!
  name: String!
  locale: String!
  short_locale: String!
  url: String!
}

type LabeledValue {
  value: String
  label: String
}

type Collection {
  handle: String!
  title: String!
  structure: CollectionStructure
}

type CollectionStructure {
  handle: String!
  title: String!
  max_depth: Int
  expects_root: Boolean!
  tree(site: String): [CollectionTreeBranch]
}

type Taxonomy {
  handle: String!
  title: String!
}

type AssetContainer {
  handle: String!
  title: String!
}

type Navigation {
  handle: String!
  title: String!
  max_depth: Int
  expects_root: Boolean!
  tree(site: String): [NavTreeBranch]
}

type CollectionTreeBranch {
  depth: Int!
  children: [CollectionTreeBranch]
  entry: EntryInterface
  page: EntryInterface @deprecated(reason: "Replaced by `entry`")
}

type NavTreeBranch {
  depth: Int!
  children: [NavTreeBranch]
  page: PageInterface
}

type Form {
  handle: String!
  title: String!
  honeypot: String
  fields: [Field]
  rules: Array
  sections: [Section]
}

type User {
  name: String
  email: String
  roles: [Role]
  groups: [UserGroup]
  avatar: AssetInterface
  id: String
  initials: String
  edit_url: String
}

type UserGroup {
  handle: String
  title: String
}

type Role {
  handle: String
  title: String
}

type TableRow {
  cells: [String]
}

interface PageInterface {
  id: ID!
  title: String
  url: String
  permalink: String
  entry_id: ID
}

interface EntryInterface {
  id: ID!
  title: String!
  slug: String!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  published: Boolean!
  private: Boolean!
  status: String!
  collection: Collection!
  blueprint: String
  date(format: String): String
  last_modified(format: String): String
  locale: String!
  site: Site!
  parent: EntryInterface
}

interface TermInterface {
  id: ID!
  title: String!
  slug: String!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  taxonomy: Taxonomy!
}

interface AssetInterface {
  id: String!
  path: String!
  extension: String!
  is_audio: Boolean
  is_image: Boolean
  is_video: Boolean
  blueprint: String
  edit_url: String
  container: AssetContainer!
  folder: String
  url: String
  permalink: String
  size: String
  size_bytes: Int
  size_kilobytes: Float
  size_megabytes: Float
  size_gigabytes: Float
  size_b: Int
  size_kb: Float
  size_mb: Float
  size_gb: Float
  last_modified: String
  focus_css: String
  height: Float
  width: Float
  orientation: String
  ratio: Float
  duration: Float
}

interface GlobalSetInterface {
  handle: String!
  title: String!
  site: Site!
}

type Field {
  handle: String!
  type: String!
  display: String!
  instructions: String
  width: Int
  if: Array
  unless: Array
  config: Array
}

type Section {
  display: String
  instructions: String
  fields: [Field]
}

type Set_Retailers_Retailer {
  name: String
  url: String
  notes: String
  id: String
  type: String!
}

union Sets_Retailers = Set_Retailers_Retailer

type Set_ProductRecommendations_Product {
  name: String
  price: String
  features(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  id: String
  type: String!
}

union Sets_ProductRecommendations = Set_ProductRecommendations_Product

type GridItem_EquipmentNeeded {
  equipment: EntryInterface
  note: String
  id: String
}

type GridItem_Ingredients {
  ingredient: String!
  amount: String
  unit: String
  notes: String
  id: String
}

type Group_Instructions_Timer {
  minutes: Int
  seconds: Int
  notes: String
}

type Set_Instructions_Step {
  title: String!
  description(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String!
  image: AssetInterface
  timer: Group_Instructions_Timer
  id: String
  type: String!
}

union Sets_Instructions = Set_Instructions_Step

type Set_Steps_Step {
  title: String!
  description: String!
  image: AssetInterface
  timer: String
  pro_tips: [String]
  id: String
  type: String!
}

union Sets_Steps = Set_Steps_Step

type GridItem_CommonMistakes {
  mistake: String!
  description: String!
  id: String
}

type Entry_Categories_Category implements EntryInterface {
  title: String!
  description(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  featured_image: AssetInterface
  parent_category: [TermInterface]
  meta_title: String
  meta_description: String
  social_image: AssetInterface
  slug: String!
  parent: EntryInterface
  categories: [TermInterface]
  id: ID!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  published: Boolean!
  private: Boolean!
  status: String!
  collection: Collection!
  blueprint: String
  date(format: String): String
  last_modified(format: String): String
  locale: String!
  site: Site!
}

type Entry_Equipment_Equipment implements EntryInterface {
  title: String!
  description(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String!
  featured_image: AssetInterface!
  gallery: [AssetInterface]
  category: LabeledValue!
  difficulty: LabeledValue
  care_instructions(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  usage_tips(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  price_range: LabeledValue
  retailers: [Sets_Retailers]
  product_recommendations: [Sets_ProductRecommendations]
  related_equipment: [EntryInterface]
  meta_title: String
  meta_description: String
  social_image: AssetInterface
  slug: String!
  parent: EntryInterface
  id: ID!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  published: Boolean!
  private: Boolean!
  status: String!
  collection: Collection!
  blueprint: String
  date(format: String): String
  last_modified(format: String): String
  locale: String!
  site: Site!
}

type Entry_Pages_Page implements EntryInterface {
  title: String!
  content(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String!
  featured_image: AssetInterface
  meta_title: String
  meta_description: String
  social_image: AssetInterface
  slug: String!
  parent: EntryInterface
  id: ID!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  published: Boolean!
  private: Boolean!
  status: String!
  collection: Collection!
  blueprint: String
  date(format: String): String
  last_modified(format: String): String
  locale: String!
  site: Site!
}

type Entry_Recipes_Recipe implements EntryInterface {
  title: String!
  description(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String!
  featured_image: AssetInterface!
  video: String
  gallery: [AssetInterface]
  cook_time: String!
  prep_time: String!
  servings: Int
  difficulty: LabeledValue!
  equipment_needed: [GridItem_EquipmentNeeded]
  ingredients: [GridItem_Ingredients]
  instructions: [Sets_Instructions]
  category: [TermInterface]!
  tags: [TermInterface]
  meta_title: String
  meta_description: String
  social_image: AssetInterface
  slug: String!
  parent: EntryInterface
  categories: [TermInterface]
  id: ID!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  published: Boolean!
  private: Boolean!
  status: String!
  collection: Collection!
  blueprint: String
  date(format: String): String
  last_modified(format: String): String
  locale: String!
  site: Site!
}

type Entry_Techniques_Techniques implements EntryInterface {
  title: String!
  description: String!
  image: AssetInterface!
  difficulty_level: LabeledValue!
  duration: String!
  ingredients: [GridItem_Ingredients]
  prerequisites: [EntryInterface]
  equipment_needed: [EntryInterface]
  steps: [Sets_Steps]
  common_mistakes: [GridItem_CommonMistakes]
  variations: [EntryInterface]
  slug: String!
  parent: EntryInterface
  categories: [TermInterface]
  tags: [TermInterface]
  id: ID!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  published: Boolean!
  private: Boolean!
  status: String!
  collection: Collection!
  blueprint: String
  date(format: String): String
  last_modified(format: String): String
  locale: String!
  site: Site!
}

type Term_Categories_Category implements TermInterface {
  title: String!
  content(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  author: User
  template: String
  slug: String!
  id: ID!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  taxonomy: Taxonomy!
}

type Term_Tags_Tag implements TermInterface {
  title: String!
  description(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  slug: String!
  id: ID!
  url: String
  uri: String
  edit_url: String!
  permalink: String
  taxonomy: Taxonomy!
}

type Asset_Assets implements AssetInterface {
  alt: String
  id: String!
  path: String!
  extension: String!
  is_audio: Boolean
  is_image: Boolean
  is_video: Boolean
  blueprint: String
  edit_url: String
  container: AssetContainer!
  folder: String
  url: String
  permalink: String
  size: String
  size_bytes: Int
  size_kilobytes: Float
  size_megabytes: Float
  size_gigabytes: Float
  size_b: Int
  size_kb: Float
  size_mb: Float
  size_gb: Float
  last_modified: String
  focus_css: String
  height: Float
  width: Float
  orientation: String
  ratio: Float
  duration: Float
}

type Asset_Images implements AssetInterface {
  alt: String
  id: String!
  path: String!
  extension: String!
  is_audio: Boolean
  is_image: Boolean
  is_video: Boolean
  blueprint: String
  edit_url: String
  container: AssetContainer!
  folder: String
  url: String
  permalink: String
  size: String
  size_bytes: Int
  size_kilobytes: Float
  size_megabytes: Float
  size_gigabytes: Float
  size_b: Int
  size_kb: Float
  size_mb: Float
  size_gb: Float
  last_modified: String
  focus_css: String
  height: Float
  width: Float
  orientation: String
  ratio: Float
  duration: Float
}

type GridItem_SocialMediaLinks {
  platform: LabeledValue!
  url: String!
  id: String
}

type GlobalSet_NewsletterSettings implements GlobalSetInterface {
  title: String!
  description(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String!
  form_title: String!
  form_description(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  success_message: String!
  error_message: String!
  handle: String!
  site: Site!
}

type GlobalSet_SiteSettings implements GlobalSetInterface {
  site_name: String!
  site_description: String!
  logo: AssetInterface!
  favicon: AssetInterface!
  social_media_links: [GridItem_SocialMediaLinks]
  email: String
  phone: String
  address(
    """
    How the value should be formatted. Either "markdown" or "html". Defaults to "html".
    """
    format: String = "html"
  ): String
  handle: String!
  title: String!
  site: Site!
}

type EntryInterfacePagination {
  """List of items on the current page"""
  data: [EntryInterface!]!

  """Number of total items selected by the query"""
  total: Int!

  """Number of items returned per page"""
  per_page: Int!

  """Current page of the cursor"""
  current_page: Int!

  """Number of the first item returned"""
  from: Int

  """Number of the last item returned"""
  to: Int

  """The last page (number of pages)"""
  last_page: Int!

  """Determines if cursor has more pages after the current page"""
  has_more_pages: Boolean!
}

type AssetInterfacePagination {
  """List of items on the current page"""
  data: [AssetInterface!]!

  """Number of total items selected by the query"""
  total: Int!

  """Number of items returned per page"""
  per_page: Int!

  """Current page of the cursor"""
  current_page: Int!

  """Number of the first item returned"""
  from: Int

  """Number of the last item returned"""
  to: Int

  """The last page (number of pages)"""
  last_page: Int!

  """Determines if cursor has more pages after the current page"""
  has_more_pages: Boolean!
}

type TermInterfacePagination {
  """List of items on the current page"""
  data: [TermInterface!]!

  """Number of total items selected by the query"""
  total: Int!

  """Number of items returned per page"""
  per_page: Int!

  """Current page of the cursor"""
  current_page: Int!

  """Number of the first item returned"""
  from: Int

  """Number of the last item returned"""
  to: Int

  """The last page (number of pages)"""
  last_page: Int!

  """Determines if cursor has more pages after the current page"""
  has_more_pages: Boolean!
}

type Query {
  ping: String
  collections: [Collection]
  collection(handle: String): Collection
  entries(collection: [String], limit: Int, page: Int, filter: JsonArgument, query_scope: JsonArgument, sort: [String], site: String): EntryInterfacePagination
  entry(id: String, slug: String, collection: String, uri: String, site: String, filter: JsonArgument): EntryInterface
  assetContainers: [AssetContainer]
  assetContainer(handle: String!): AssetContainer
  assets(container: String!, limit: Int, page: Int, filter: JsonArgument, sort: [String]): AssetInterfacePagination
  asset(id: String, container: String, path: String): AssetInterface
  taxonomies: [Taxonomy]
  taxonomy(handle: String): Taxonomy
  terms(taxonomy: [String], limit: Int, page: Int, filter: JsonArgument, sort: [String], site: String): TermInterfacePagination
  term(id: String): TermInterface
  globalSets: [GlobalSetInterface]
  globalSet(handle: String, site: String): GlobalSetInterface
}