/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query AllCategories {\n  terms(taxonomy: [\"categories\"]) {\n    data {\n      ... on Term_Categories_Category {\n        id\n        title\n        slug\n        content\n      }\n    }\n  }\n}": typeof types.AllCategoriesDocument,
    "query AllEquipment($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"equipment\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Equipment_Equipment {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        gallery {\n          url\n        }\n        category {\n          value\n          label\n        }\n        difficulty {\n          value\n          label\n        }\n        care_instructions\n        usage_tips\n        price_range {\n          value\n          label\n        }\n        retailers {\n          ... on Set_Retailers_Retailer {\n            name\n            url\n            notes\n          }\n        }\n        product_recommendations {\n          ... on Set_ProductRecommendations_Product {\n            name\n            price\n            features\n          }\n        }\n        related_equipment {\n          title\n          slug\n        }\n      }\n    }\n  }\n}": typeof types.AllEquipmentDocument,
    "query AllRecipes($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"recipes\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Recipes_Recipe {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        cook_time\n        prep_time\n        servings\n        difficulty {\n          value\n          label\n        }\n        category {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n        published\n      }\n    }\n    total\n    per_page\n    current_page\n    last_page\n    has_more_pages\n  }\n}\n\nquery RecipeBySlug($slug: String!) {\n  entry(collection: \"recipes\", slug: $slug) {\n    ... on Entry_Recipes_Recipe {\n      id\n      title\n      slug\n      description\n      featured_image {\n        url\n      }\n      cook_time\n      prep_time\n      servings\n      difficulty {\n        value\n        label\n      }\n      equipment_needed {\n        equipment {\n          title\n          slug\n        }\n        note\n      }\n      ingredients {\n        ingredient\n        amount\n        unit\n        notes\n      }\n      instructions {\n        ... on Set_Instructions_Step {\n          title\n          description\n          image {\n            url\n          }\n          timer {\n            minutes\n            seconds\n            notes\n          }\n        }\n      }\n      category {\n        title\n        slug\n      }\n      tags {\n        title\n        slug\n      }\n      published\n    }\n  }\n}": typeof types.AllRecipesDocument,
    "query SiteSettings {\n  globalSet(handle: \"site_settings\") {\n    ... on GlobalSet_SiteSettings {\n      site_name\n      site_description\n      logo {\n        url\n      }\n      favicon {\n        url\n      }\n      social_media_links {\n        platform {\n          value\n          label\n        }\n        url\n      }\n      email\n      phone\n      address\n    }\n  }\n}": typeof types.SiteSettingsDocument,
    "query AllTags {\n  terms(taxonomy: [\"tags\"]) {\n    data {\n      ... on Term_Tags_Tag {\n        id\n        title\n        slug\n        description\n      }\n    }\n  }\n}": typeof types.AllTagsDocument,
    "query AllTechniques($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"techniques\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Techniques_Techniques {\n        id\n        title\n        slug\n        description\n        image {\n          url\n        }\n        difficulty_level {\n          value\n          label\n        }\n        duration\n        steps {\n          ... on Set_Steps_Step {\n            title\n            description\n            image {\n              url\n            }\n            timer\n            pro_tips\n          }\n        }\n        categories {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n      }\n    }\n  }\n}": typeof types.AllTechniquesDocument,
};
const documents: Documents = {
    "query AllCategories {\n  terms(taxonomy: [\"categories\"]) {\n    data {\n      ... on Term_Categories_Category {\n        id\n        title\n        slug\n        content\n      }\n    }\n  }\n}": types.AllCategoriesDocument,
    "query AllEquipment($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"equipment\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Equipment_Equipment {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        gallery {\n          url\n        }\n        category {\n          value\n          label\n        }\n        difficulty {\n          value\n          label\n        }\n        care_instructions\n        usage_tips\n        price_range {\n          value\n          label\n        }\n        retailers {\n          ... on Set_Retailers_Retailer {\n            name\n            url\n            notes\n          }\n        }\n        product_recommendations {\n          ... on Set_ProductRecommendations_Product {\n            name\n            price\n            features\n          }\n        }\n        related_equipment {\n          title\n          slug\n        }\n      }\n    }\n  }\n}": types.AllEquipmentDocument,
    "query AllRecipes($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"recipes\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Recipes_Recipe {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        cook_time\n        prep_time\n        servings\n        difficulty {\n          value\n          label\n        }\n        category {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n        published\n      }\n    }\n    total\n    per_page\n    current_page\n    last_page\n    has_more_pages\n  }\n}\n\nquery RecipeBySlug($slug: String!) {\n  entry(collection: \"recipes\", slug: $slug) {\n    ... on Entry_Recipes_Recipe {\n      id\n      title\n      slug\n      description\n      featured_image {\n        url\n      }\n      cook_time\n      prep_time\n      servings\n      difficulty {\n        value\n        label\n      }\n      equipment_needed {\n        equipment {\n          title\n          slug\n        }\n        note\n      }\n      ingredients {\n        ingredient\n        amount\n        unit\n        notes\n      }\n      instructions {\n        ... on Set_Instructions_Step {\n          title\n          description\n          image {\n            url\n          }\n          timer {\n            minutes\n            seconds\n            notes\n          }\n        }\n      }\n      category {\n        title\n        slug\n      }\n      tags {\n        title\n        slug\n      }\n      published\n    }\n  }\n}": types.AllRecipesDocument,
    "query SiteSettings {\n  globalSet(handle: \"site_settings\") {\n    ... on GlobalSet_SiteSettings {\n      site_name\n      site_description\n      logo {\n        url\n      }\n      favicon {\n        url\n      }\n      social_media_links {\n        platform {\n          value\n          label\n        }\n        url\n      }\n      email\n      phone\n      address\n    }\n  }\n}": types.SiteSettingsDocument,
    "query AllTags {\n  terms(taxonomy: [\"tags\"]) {\n    data {\n      ... on Term_Tags_Tag {\n        id\n        title\n        slug\n        description\n      }\n    }\n  }\n}": types.AllTagsDocument,
    "query AllTechniques($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"techniques\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Techniques_Techniques {\n        id\n        title\n        slug\n        description\n        image {\n          url\n        }\n        difficulty_level {\n          value\n          label\n        }\n        duration\n        steps {\n          ... on Set_Steps_Step {\n            title\n            description\n            image {\n              url\n            }\n            timer\n            pro_tips\n          }\n        }\n        categories {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n      }\n    }\n  }\n}": types.AllTechniquesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllCategories {\n  terms(taxonomy: [\"categories\"]) {\n    data {\n      ... on Term_Categories_Category {\n        id\n        title\n        slug\n        content\n      }\n    }\n  }\n}"): (typeof documents)["query AllCategories {\n  terms(taxonomy: [\"categories\"]) {\n    data {\n      ... on Term_Categories_Category {\n        id\n        title\n        slug\n        content\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllEquipment($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"equipment\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Equipment_Equipment {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        gallery {\n          url\n        }\n        category {\n          value\n          label\n        }\n        difficulty {\n          value\n          label\n        }\n        care_instructions\n        usage_tips\n        price_range {\n          value\n          label\n        }\n        retailers {\n          ... on Set_Retailers_Retailer {\n            name\n            url\n            notes\n          }\n        }\n        product_recommendations {\n          ... on Set_ProductRecommendations_Product {\n            name\n            price\n            features\n          }\n        }\n        related_equipment {\n          title\n          slug\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllEquipment($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"equipment\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Equipment_Equipment {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        gallery {\n          url\n        }\n        category {\n          value\n          label\n        }\n        difficulty {\n          value\n          label\n        }\n        care_instructions\n        usage_tips\n        price_range {\n          value\n          label\n        }\n        retailers {\n          ... on Set_Retailers_Retailer {\n            name\n            url\n            notes\n          }\n        }\n        product_recommendations {\n          ... on Set_ProductRecommendations_Product {\n            name\n            price\n            features\n          }\n        }\n        related_equipment {\n          title\n          slug\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllRecipes($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"recipes\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Recipes_Recipe {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        cook_time\n        prep_time\n        servings\n        difficulty {\n          value\n          label\n        }\n        category {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n        published\n      }\n    }\n    total\n    per_page\n    current_page\n    last_page\n    has_more_pages\n  }\n}\n\nquery RecipeBySlug($slug: String!) {\n  entry(collection: \"recipes\", slug: $slug) {\n    ... on Entry_Recipes_Recipe {\n      id\n      title\n      slug\n      description\n      featured_image {\n        url\n      }\n      cook_time\n      prep_time\n      servings\n      difficulty {\n        value\n        label\n      }\n      equipment_needed {\n        equipment {\n          title\n          slug\n        }\n        note\n      }\n      ingredients {\n        ingredient\n        amount\n        unit\n        notes\n      }\n      instructions {\n        ... on Set_Instructions_Step {\n          title\n          description\n          image {\n            url\n          }\n          timer {\n            minutes\n            seconds\n            notes\n          }\n        }\n      }\n      category {\n        title\n        slug\n      }\n      tags {\n        title\n        slug\n      }\n      published\n    }\n  }\n}"): (typeof documents)["query AllRecipes($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"recipes\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Recipes_Recipe {\n        id\n        title\n        slug\n        description\n        featured_image {\n          url\n        }\n        cook_time\n        prep_time\n        servings\n        difficulty {\n          value\n          label\n        }\n        category {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n        published\n      }\n    }\n    total\n    per_page\n    current_page\n    last_page\n    has_more_pages\n  }\n}\n\nquery RecipeBySlug($slug: String!) {\n  entry(collection: \"recipes\", slug: $slug) {\n    ... on Entry_Recipes_Recipe {\n      id\n      title\n      slug\n      description\n      featured_image {\n        url\n      }\n      cook_time\n      prep_time\n      servings\n      difficulty {\n        value\n        label\n      }\n      equipment_needed {\n        equipment {\n          title\n          slug\n        }\n        note\n      }\n      ingredients {\n        ingredient\n        amount\n        unit\n        notes\n      }\n      instructions {\n        ... on Set_Instructions_Step {\n          title\n          description\n          image {\n            url\n          }\n          timer {\n            minutes\n            seconds\n            notes\n          }\n        }\n      }\n      category {\n        title\n        slug\n      }\n      tags {\n        title\n        slug\n      }\n      published\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SiteSettings {\n  globalSet(handle: \"site_settings\") {\n    ... on GlobalSet_SiteSettings {\n      site_name\n      site_description\n      logo {\n        url\n      }\n      favicon {\n        url\n      }\n      social_media_links {\n        platform {\n          value\n          label\n        }\n        url\n      }\n      email\n      phone\n      address\n    }\n  }\n}"): (typeof documents)["query SiteSettings {\n  globalSet(handle: \"site_settings\") {\n    ... on GlobalSet_SiteSettings {\n      site_name\n      site_description\n      logo {\n        url\n      }\n      favicon {\n        url\n      }\n      social_media_links {\n        platform {\n          value\n          label\n        }\n        url\n      }\n      email\n      phone\n      address\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllTags {\n  terms(taxonomy: [\"tags\"]) {\n    data {\n      ... on Term_Tags_Tag {\n        id\n        title\n        slug\n        description\n      }\n    }\n  }\n}"): (typeof documents)["query AllTags {\n  terms(taxonomy: [\"tags\"]) {\n    data {\n      ... on Term_Tags_Tag {\n        id\n        title\n        slug\n        description\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllTechniques($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"techniques\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Techniques_Techniques {\n        id\n        title\n        slug\n        description\n        image {\n          url\n        }\n        difficulty_level {\n          value\n          label\n        }\n        duration\n        steps {\n          ... on Set_Steps_Step {\n            title\n            description\n            image {\n              url\n            }\n            timer\n            pro_tips\n          }\n        }\n        categories {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllTechniques($page: Int = 1, $limit: Int = 10) {\n  entries(collection: [\"techniques\"], page: $page, limit: $limit) {\n    data {\n      ... on Entry_Techniques_Techniques {\n        id\n        title\n        slug\n        description\n        image {\n          url\n        }\n        difficulty_level {\n          value\n          label\n        }\n        duration\n        steps {\n          ... on Set_Steps_Step {\n            title\n            description\n            image {\n              url\n            }\n            timer\n            pro_tips\n          }\n        }\n        categories {\n          title\n          slug\n        }\n        tags {\n          title\n          slug\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;