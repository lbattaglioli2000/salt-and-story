---
import Layout from '../../layouts/Layout.astro';
import { Icon } from 'astro-icon';
import Newsletter from '../../components/ui/Newsletter.astro';
import WinePairing from '../../components/WinePairing.astro';
import Timer from '../../components/Timer.astro';
import AdUnit from '../../components/AdUnit.astro';
import { sdk } from '../../lib/graphql';
import type { Entry_Recipes_Recipe, Set_WinePairings_Wine, GridItem_ComplementaryDishes, Set_Instructions_Step } from '../../graphql/generated/graphql';

// Enable on-demand rendering
export const prerender = false;

// Get the slug from the URL
const { slug } = Astro.params;

// Fetch the recipe data
const { data } = await sdk.RecipeBySlug({ slug: slug || '' });

// If no recipe is found, return a 404
if (!data?.entry || !('title' in data.entry) || !data.entry.published) {
  return Astro.redirect('/404');
}

const recipe = data.entry as Entry_Recipes_Recipe;
---

<Layout title={recipe.title} description={recipe.description}>
  <article>
    <!-- Hero Section -->
    <div class="container mx-auto px-4 py-10">
      <div class="relative h-[60vh] min-h-[400px] overflow-hidden rounded-2xl shadow-xl">
        <img 
          src={recipe.featured_image?.url} 
          alt={recipe.title} 
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent"></div>
        <div class="absolute bottom-0 left-0 right-0 p-8 text-white">
          <h1 class="font-heading text-4xl md:text-5xl mb-4">{recipe.title}</h1>
          <div class="flex flex-wrap gap-4 text-sm">
            <span class="flex items-center">
              <Icon name="heroicons-outline:clock" class="w-5 h-5 mr-1" />
              {recipe.cook_time}
            </span>
            <span class="flex items-center">
              <Icon name="heroicons-outline:user-group" class="w-5 h-5 mr-1" />
              {recipe.servings} servings
            </span>
            <span class="flex items-center">
              <Icon name="heroicons-outline:academic-cap" class="w-5 h-5 mr-1" />
              {recipe.difficulty?.label}
            </span>
            <span class="bg-burgundy px-3 py-1 rounded-full">
              {recipe.category?.[0]?.title}
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Recipe Content -->
    <div class="container mx-auto px-4">
      <!-- Top Ad -->
      <AdUnit type="horizontal" className="mb-12" />

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
        <!-- Ingredients Sidebar -->
        <div class="lg:col-span-1">
          <h2 class="font-heading text-3xl text-burgundy mb-8">Ingredients</h2>
          <ul class="space-y-3">
            {recipe.ingredients?.map((ingredient) => (
              <li class="flex items-center text-olive-dark">
                <Icon name="heroicons-outline:check" class="w-5 h-5 mr-2 text-burgundy flex-shrink-0" />
                <span>
                  {ingredient?.amount} {ingredient?.unit} {ingredient?.ingredient}
                  {ingredient?.notes && <span class="text-sm text-olive"> ({ingredient.notes})</span>}
                </span>
              </li>
            ))}
          </ul>
          
          <!-- Sidebar Ad -->
          <AdUnit type="sidebar" className="mt-12" />
        </div>

        <!-- Instructions -->
        <div class="lg:col-span-2">
          <h2 class="font-heading text-3xl text-burgundy mb-8">Instructions</h2>
          
          <ol class="space-y-8">
            {recipe.instructions?.map((step, index) => {
              const typedStep = step as Set_Instructions_Step;
              return (
                <li class="flex items-start">
                  <span class="flex-shrink-0 w-8 h-8 bg-burgundy text-white rounded-full flex items-center justify-center mr-4 mt-1">
                    {index + 1}
                  </span>
                  <div class="flex-grow">
                    <p class="text-olive-dark font-medium mb-2">{typedStep?.title}</p>
                    <p class="text-olive text-sm mb-3">{typedStep?.description}</p>
                    {typedStep?.timer && (
                      <button 
                        class="start-timer inline-flex items-center text-sm text-burgundy hover:text-burgundy-light transition-colors"
                        data-duration={((typedStep.timer.minutes || 0) * 60) + (typedStep.timer.seconds || 0)}
                        data-label={`Step ${index + 1}`}
                        data-direction={typedStep.title}
                      >
                        <Icon name="heroicons-outline:clock" class="w-4 h-4 mr-1" />
                        Set timer ({typedStep.timer.minutes || 0} min {typedStep.timer.seconds || 0} sec)
                      </button>
                    )}
                  </div>
                </li>
              );
            })}
          </ol>
        </div>
      </div>

      <!-- Wine Pairing -->
      {recipe.wine_pairings?.[0] && (
        <div class="container mx-auto px-4 my-16">
          <div class="bg-burgundy rounded-2xl overflow-hidden shadow-xl">
            <WinePairing wine={{
              name: (recipe.wine_pairings[0] as Set_WinePairings_Wine).wine_name || '',
              type: (recipe.wine_pairings[0] as Set_WinePairings_Wine).wine_type || '',
              region: (recipe.wine_pairings[0] as Set_WinePairings_Wine).wine_region || '',
              description: (recipe.wine_pairings[0] as Set_WinePairings_Wine).wine_description || '',
              image: (recipe.wine_pairings[0] as Set_WinePairings_Wine).wine_image?.url || ''
            }} />
          </div>
        </div>
      )}

      <!-- Complete Your Meal -->
      {recipe.complementary_dishes && recipe.complementary_dishes.length > 0 && (
        <div class="mt-16">
          <h2 class="font-heading text-3xl text-burgundy mb-8">Complete Your Meal</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            {recipe.complementary_dishes.map((dish) => {
              const typedDish = dish as GridItem_ComplementaryDishes;
              const complementaryRecipe = typedDish?.recipe as Entry_Recipes_Recipe;
              return complementaryRecipe && (
                <div class="bg-white rounded-xl overflow-hidden shadow-md">
                  <img 
                    src={complementaryRecipe.featured_image?.url} 
                    alt={complementaryRecipe.title} 
                    class="w-full h-48 object-cover"
                  />
                  <div class="p-6">
                    <h3 class="font-heading text-xl text-burgundy mb-2">{complementaryRecipe.title}</h3>
                    <p class="text-olive text-sm mb-4">{complementaryRecipe.description}</p>
                    <div class="flex items-center text-sm text-olive">
                      <Icon name="heroicons-outline:clock" class="w-4 h-4 mr-1" />
                      {complementaryRecipe.cook_time} + {complementaryRecipe.prep_time}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      <!-- Newsletter -->
      <Newsletter />
    </div>
  </article>
</Layout>

<script>
  // Timer functionality
  const template = document.querySelector('template') as HTMLTemplateElement;
  if (!template) throw new Error('Timer template not found');

  document.querySelectorAll('.start-timer').forEach(button => {
    button.addEventListener('click', () => {
      const duration = parseInt(button.getAttribute('data-duration') || '0');
      const label = button.getAttribute('data-label') || '';
      const direction = button.getAttribute('data-direction') || '';

      const timer = template.content.cloneNode(true) as DocumentFragment;
      const timerElement = timer.querySelector('.timer') as HTMLElement;
      if (!timerElement) return;

      timerElement.setAttribute('data-duration', duration.toString());
      timerElement.setAttribute('data-label', label);
      timerElement.setAttribute('data-direction', direction);

      document.body.appendChild(timer);
    });
  });
</script>

<template>
  <div class="timer fixed bottom-4 right-4 bg-white rounded-lg shadow-lg p-4 z-50">
    <div class="flex items-center justify-between mb-2">
      <span class="timer-label font-medium text-burgundy"></span>
      <button class="close-timer text-olive hover:text-burgundy">
        <Icon name="heroicons-outline:x" class="w-5 h-5" />
      </button>
    </div>
    <div class="timer-display text-2xl font-mono text-olive-dark"></div>
    <div class="timer-direction text-sm text-olive"></div>
  </div>
</template>